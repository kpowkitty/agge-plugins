// regex chat message
    @Subscribe
    public void onChatMessage(ChatMessage e) {
        if (!started)
            return;

        //int level = 4;
        //String text = e.getMessage();
        //log.info("Recieved ChatMessage: " + text);
        //// Ignore all text and try to capture specified int level.
        //Pattern pattern = Pattern.compile("\\b" + level + "\\b"); 
        //Matcher matcher = pattern.matcher(text);
        //if (matcher.find()) {
        //    log.info("Found " + level +"!");
        //    return;
        //}
        //return;
    }

    // Wrapper to return boolean for player.getAnimation()
    //private void isAnimating() {
    //    if (player.getAnimation() == -1)
    //        return true;
    //    return false;
    //}

    public boolean checkLevelUp(int level)
    {
        if (!Widgets.search()
                    .withParentId(WidgetID.LEVEL_UP_GROUP_ID)
                    .empty()) {
            log.info("Found level-up Widget!");
            // LevelUp.LEVEL = 2
            Widget widget = client.getWidget(
                WidgetID.LEVEL_UP_GROUP_ID, WidgetID.LevelUp.LEVEL);
            String text = widget.getText();
            // Ignore all text and try to capture specified int level.
            Pattern pattern = Pattern.compile("\\b" + level + "\\b"); 
            Matcher matcher = pattern.matcher(text);
            log.info("Level-up Widget text: " + text);
            if (matcher.find()) {
                log.info("Found " + level +"!");
                return true;
            }
        }
        return false;
    }

// Leveling Instructions with switch statement.
    public void bronzeInstructions()
    {
        List<InstructionID> keys = bronzeShuffle();
        for (InstructionID key : keys) {
            Pair<Consumer<Instruction>, Instruction> pair = 
                instructionMap.get(key);
            pair.getLeft().apply(pair.getRight());
            //String name = pair.getRight().getName(); // You might want to extract the name from the instruction
            
            //instructions.register(instr, key.toString());

            //// Special handling procedures for each key.
            //switch(key) {
            //case MINING_TIN:
            //    // Already paths.
            //    instructions.register(() ->
            //        ctx.plugin.messageBus.query(MessageID.DONE_SKILLING),
            //        key.toString());



            //    //instructions.register(() ->
            //    //    ctx.plugin.pluginManager.stopPlugin(SkillerPlugin),
            //    //    "Stopping SkillerPlugin");
            //    break;
            //case WOODCUTTING_TREE:
            //    // Already paths.
            //    instructions.register(() ->
            //        ctx.plugin.messageBus.query(MessageID.DONE_SKILLING),
            //        key.toString());
            //    //instructions.register(() ->
            //    //    ctx.plugin.pluginManager.stopPlugin(SkillerPlugin),
            //    //    "Stopping SkillerPlugin");
            //    break;
            //case FISHING_SHRIMP:
            //    // Already paths.
            //    instructions.register(() ->
            //        ctx.plugin.messageBus.query(MessageID.DONE_SKILLING),
            //        key.toString());
            //    //instructions.register(() ->
            //    //    ctx.plugin.pluginManager.stopPlugin(SkillerPlugin),
            //    //    "Stopping SkillerPlugin");
            //    break;
            //case STRENGTH_CHICKEN:
            //    // Path to chickens.
            //    path(pair.getRight().getLocation());
            //    instructions.register(() ->
            //        ctx.plugin.messageBus.query(MessageID.DONE_FIGHTING),
            //        key.toString());
            //    //instructions.register(() ->
            //    //    ctx.plugin.pluginManager.stopPlugin(FighterPlugin),
            //    //    "Stopping SkillerPlugin");
            //    break;
            //case ATTACK_CHICKEN:
            //    // Always after strength, already pathed.
            //    instructions.register(() ->
            //        ctx.plugin.messageBus.query(MessageID.DONE_FIGHTING),
            //        key.toString());
            //    //instructions.register(() ->
            //    //    ctx.plugin.pluginManager.stopPlugin(FighterPlugin),
            //    //    "Stopping SkillerPlugin");
            //    break;
            //case DEFENCE_CHICKEN:
            //    // Always after strength, already pathed.
            //    instructions.register(() ->
            //        ctx.plugin.messageBus.query(MessageID.DONE_FIGHTING),
            //        key.toString());
            //    //instructions.register(() ->
            //    //    ctx.plugin.pluginManager.stopPlugin(FighterPlugin),
            //    //    "Stopping SkillerPlugin");
            //    break;
            //default:
            //    // xxx error handling
            //    break;
            //}
        }
    }

// Buying at GE
    if (!isBuying())
        {
            Optional<Widget> buyWidget = Widgets.search().hiddenState(false).withAction("Create <col=ff9040>Buy</col> offer").first();
            if (buyWidget.isPresent())
            {
                MousePackets.queueClickPacket();
                WidgetPackets.queueWidgetAction(buyWidget.get(), "Create Buy offer");
                return;
                //return;
            }
            return;
        }

   List<WorldPoint> walkableSearchResult = TileObjects.search().withId(13838).result().stream().map(TileObject::getWorldLocation).collect(Collectors.toList());
        List<WorldPoint> impassableSearchResult = TileObjects.search().withId(13839).result().stream().map(TileObject::getWorldLocation).collect(Collectors.toList());
        HashSet<WorldPoint> walkableTiles = new HashSet<>(walkableSearchResult);
        HashSet<WorldPoint> impassableTiles = new HashSet<>(impassableSearchResult);
        walkableTiles.addAll(EthanApiPlugin.reachableTiles());

        WorldPoint endPoint = getFirstEndPoint(); // any tile adjacent to a 13838 tile on the otherside of the bog

        List<WorldPoint> path = EthanApiPlugin.pathToGoal(endPoint, walkableTiles, impassableTiles, impassableTiles);

        if (path != null && !path.isEmpty()) {

package com.example.EthanApiPlugin.Utility;

import com.example.EthanApiPlugin.Collections.GrandExchangeInventory;
import com.example.EthanApiPlugin.Collections.NPCs;
import com.example.EthanApiPlugin.Collections.Widgets;
import com.example.EthanApiPlugin.EthanApiPlugin;
import com.example.InteractionApi.NPCInteraction;
import com.example.Packets.MousePackets;
import com.example.Packets.WidgetPackets;
import net.runelite.api.*;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetInfo;

import java.util.Arrays;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Collectors;




public class GrandExchangeUtility
{

	private static final int F2P_SLOTS = 3;
	private static final int P2P_SLOTS = 8;

	private static final int PRICE_VARBIT = 4398;
	private static final int QUANTITY_VARBIT = 4396;
	private static final int OFFER_VARBIT = 4439;

	public static boolean isOpen()
	{
		return Widgets.search().withId(WidgetInfo.GRAND_EXCHANGE_INVENTORY_ITEMS_CONTAINER.getId()).first().isPresent();
	}

	public static void open()
	{
		NPCs.search().withAction("Exchange").nearestToPlayer().ifPresent(x -> NPCInteraction.interact(x, "Exchange"));
	}

	public static boolean isSelling()
	{
		return EthanApiPlugin.getClient().getVarbitValue(OFFER_VARBIT) != 0 && EthanApiPlugin.getClient().getVarbitValue(Varbits.GE_OFFER_CREATION_TYPE) != 0;
	}

	public static boolean isBuying()
	{
		return EthanApiPlugin.getClient().getVarbitValue(OFFER_VARBIT) != 0 && EthanApiPlugin.getClient().getVarbitValue(Varbits.GE_OFFER_CREATION_TYPE) == 0;
	}

	public static int getItemId()
	{
		return EthanApiPlugin.getClient().getVarpValue(VarPlayer.CURRENT_GE_ITEM);
	}

	public static void setItem(int id)
	{
		EthanApiPlugin.getClient().runScript(754, id, 84);
	}

	public static int getPrice()
	{
		return EthanApiPlugin.getClient().getVarbitValue(PRICE_VARBIT);
	}

	public static int getQuantity()
	{
		return EthanApiPlugin.getClient().getVarbitValue(QUANTITY_VARBIT);
	}

	public static boolean isFull()
	{
		boolean isMember = EthanApiPlugin.getClient().getWorldType().contains(WorldType.MEMBERS);
		return getOffers().size() > (isMember ? (P2P_SLOTS - 1) : (F2P_SLOTS - 1));
	}

	public static List<GrandExchangeOffer> getOffers()
	{
		return Arrays.stream(EthanApiPlugin.getClient().getGrandExchangeOffers()).filter(x -> x.getItemId() > 0).collect(Collectors.toList());
	}

	public static void collect()
	{
		Widgets.search().hiddenState(false).withText("Collect").first().ifPresent(x -> widgetAction(1, x.getId(), -1, 0));
	}

	public static void buyItem(int id, int amount, int price)
	{

		if (!isOpen() || isFull())
		{
			return;
		}

		if (!isBuying())
		{
			Optional<Widget> buyWidget = Widgets.search().hiddenState(false).withAction("Create <col=ff9040>Buy</col> offer").first();
			if (buyWidget.isPresent())
			{
				MousePackets.queueClickPacket();
				WidgetPackets.queueWidgetAction(buyWidget.get(), "Create Buy offer");
				return;
			}
			return;
		}

		if (getItemId() != id)
		{
			setItem(id);
			return;
		}

		if (getQuantity() != amount)
		{
			Widgets.search().hiddenState(false).withId(WidgetInfo.CHATBOX_FULL_INPUT.getId()).first().ifPresentOrElse(x -> enterAmount(amount), () -> widgetAction(1, 30474265, -1, 7));
			return;
		}

		if (getPrice() != price)
		{
			Widgets.search().hiddenState(false).withId(WidgetInfo.CHATBOX_FULL_INPUT.getId()).first().ifPresentOrElse(x -> enterAmount(price), () -> widgetAction(1, 30474265, -1, 12));
			return;
		}

		Widgets.search().withAction("Confirm").first().ifPresent(x -> widgetAction(1, x.getId(), -1, -1));
	}

	public static void sellItem(int id, int price)
	{
		if (!isOpen() || isFull())
		{
			return;
		}

		Optional<Widget> itemToSell = GrandExchangeInventory.search().withId(GrandExchangeInventory.search().withId(id).first().isEmpty() ? getNotedId(id) : id).first();

		if (!isSelling())
		{

			Optional<Widget> buyWidget = Widgets.search().hiddenState(false).withAction("Create <col=ff9040>Sell</col> offer").first();
			if (buyWidget.isPresent())
			{
				MousePackets.queueClickPacket();
				WidgetPackets.queueWidgetAction(buyWidget.get(), "Create Sell offer");
				return;
				//return;
			}
			System.out.println("return 2");
			//widgetAction(1, getFreeSlot(), -1, 4);
			return;
		}

		if (getItemId() != id)
		{
			itemToSell.ifPresent(x -> widgetAction(1, WidgetInfo.GRAND_EXCHANGE_INVENTORY_ITEMS_CONTAINER.getId(), x.getItemId(), x.getIndex()));
			return;
		}

		if (getPrice() != price)
		{
			Widgets.search().hiddenState(false).withId(WidgetInfo.CHATBOX_FULL_INPUT.getId()).first().ifPresentOrElse(x -> enterAmount(price), () -> widgetAction(1, 30474265, -1, 12));
			return;
		}

		widgetAction(1, 30474265, -1, 6);

		Widgets.search().withAction("Confirm").first().ifPresent(x -> widgetAction(1, x.getId(), -1, -1));
	}

	private static void enterAmount(int amount)
	{
		EthanApiPlugin.getClient().setVarcStrValue(VarClientStr.INPUT_TEXT, String.valueOf(amount));
		EthanApiPlugin.getClient().runScript(681);
	}


	private static void widgetAction(int actionFieldNo, int widgetId, int itemId, int childId)
	{
		MousePackets.queueClickPacket();
		WidgetPackets.queueWidgetActionPacket(actionFieldNo, widgetId, itemId, childId);
	}

	private static int getNotedId(int id)
	{
		return EthanApiPlugin.getClient().getItemDefinition(id).getLinkedNoteId();
	}
}

if (plugin.initialPlayerLocation != null) {
  List<WorldPoint> surroundingTiles = plugin.getSurroundingTiles(plugin.initialPlayerLocation, plugin.radius);
    for (WorldPoint tile : surroundingTiles) {
        LocalPoint localTile = LocalPoint.fromWorld(client, tile);
          if (localTile != null) {
            renderTile(graphics, localTile, Color.BLACK, 1, new Color(0, 255, 0, 20));
          }
    }
}

package com.piggyplugins.AutoTobRestocker.util;

import com.example.EthanApiPlugin.Collections.GrandExchangeInventory;
import com.example.EthanApiPlugin.Collections.NPCs;
import com.example.EthanApiPlugin.Collections.Widgets;
import com.example.EthanApiPlugin.EthanApiPlugin;
import com.example.InteractionApi.NPCInteraction;
import com.example.Packets.MousePackets;
import com.example.Packets.WidgetPackets;
import net.runelite.api.*;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetInfo;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

public class GrandExchange {

    private static final int F2P_SLOTS = 3;
    private static final int P2P_SLOTS = 8;

    private static final int PRICE_VARBIT = 4398;
    private static final int QUANTITY_VARBIT = 4396;
    private static final int OFFER_VARBIT = 4439;

    private static final List<Integer> OFFER_SLOTS = List.of(30474247, 30474248, 30474249, 30474250, 304744251, 30474252, 304744253, 304742454);
    private static final List<GrandExchangeOfferState> COMPLETED_OFFER_STATES = List.of(GrandExchangeOfferState.BOUGHT, GrandExchangeOfferState.SOLD);

    public static boolean isOpen() {
        return Widgets.search().withId(WidgetInfo.GRAND_EXCHANGE_INVENTORY_ITEMS_CONTAINER.getId()).first().isPresent();
    }

    public static void open() {
        NPCs.search().withAction("Exchange").nearestToPlayer().ifPresent(x -> NPCInteraction.interact(x, "Exchange"));
    }

    public static boolean isSelling() {
        return EthanApiPlugin.getClient().getVarbitValue(OFFER_VARBIT) != 0 && EthanApiPlugin.getClient().getVarbitValue(Varbits.GE_OFFER_CREATION_TYPE) != 0;
    }

    public static boolean isBuying() {
        return EthanApiPlugin.getClient().getVarbitValue(OFFER_VARBIT) != 0 && EthanApiPlugin.getClient().getVarbitValue(Varbits.GE_OFFER_CREATION_TYPE) == 0;
    }

    public static int getItemId() {
        return EthanApiPlugin.getClient().getVarpValue(VarPlayer.CURRENT_GE_ITEM);
    }

    public static void setItem(int id) {
        EthanApiPlugin.getClient().runScript(754, id, 84);
    }

    public static int getPrice() {
        return EthanApiPlugin.getClient().getVarbitValue(PRICE_VARBIT);
    }

    public static int getQuantity() {
        return EthanApiPlugin.getClient().getVarbitValue(QUANTITY_VARBIT);
    }

    public static boolean isFull() {
        boolean isMember = EthanApiPlugin.getClient().getWorldType().contains(WorldType.MEMBERS);
        return getOffers().size() > (isMember ? (P2P_SLOTS - 1) : (F2P_SLOTS - 1));
    }

    public static List<GrandExchangeOffer> getOffers() {
        return Arrays.stream(EthanApiPlugin.getClient().getGrandExchangeOffers()).filter(x -> x.getItemId() > 0).collect(Collectors.toList());
    }

    public static List<GrandExchangeOffer> getCompletedOffers() {
        return Arrays.stream(EthanApiPlugin.getClient().getGrandExchangeOffers()).filter(x -> x.getItemId() > 0 && COMPLETED_OFFER_STATES.contains(x.getState())).collect(Collectors.toList());
    }

    public static void collectAll() {
        Widgets.search().hiddenState(false).withText("Collect").first().ifPresent(x -> widgetAction(1, x.getId(), -1, 0));
    }

    public static void buyItem(int id, int amount, int price) {
        if (!isOpen() || isFull()) {
            return;
        }

        if (!isBuying()) {
            widgetAction(1, getFreeSlot(), -1, 3);
            return;
        }

        if (getItemId() != id) {
            setItem(id);
            return;
        }

        if (getQuantity() != amount) {
            Widgets.search().hiddenState(false).withId(WidgetInfo.CHATBOX_FULL_INPUT.getId()).first().ifPresentOrElse(x -> enterAmount(amount), () -> widgetAction(1, 30474265, -1, 7));
            return;
        }

        if (getPrice() != price) {
            Widgets.search().hiddenState(false).withId(WidgetInfo.CHATBOX_FULL_INPUT.getId()).first().ifPresentOrElse(x -> enterAmount(price), () -> widgetAction(1, 30474265, -1, 12));
            return;
        }

        Widgets.search().withAction("Confirm").first().ifPresent(x -> widgetAction(1, x.getId(), -1, -1));
    }

    public static void sellItem(int id, int price) {
        if (!isOpen() || isFull()) {
            return;
        }

        Optional<Widget> itemToSell = GrandExchangeInventory.search().withId(GrandExchangeInventory.search().withId(id).first().isEmpty() ? getNotedId(id) : id).first();

        if (!isSelling()) {
            widgetAction(1, getFreeSlot(), -1, 4);
            return;
        }

        if (getItemId() != id) {
            itemToSell.ifPresent(x -> widgetAction(1, WidgetInfo.GRAND_EXCHANGE_INVENTORY_ITEMS_CONTAINER.getId(), x.getItemId(), x.getIndex()));
            return;
        }

        if (getPrice() != price) {
            Widgets.search().hiddenState(false).withId(WidgetInfo.CHATBOX_FULL_INPUT.getId()).first().ifPresentOrElse(x -> enterAmount(price), () -> widgetAction(1, 30474265, -1, 12));
            return;
        }

        widgetAction(1, 30474265, -1, 6);

        Widgets.search().withAction("Confirm").first().ifPresent(x -> widgetAction(1, x.getId(), -1, -1));
    }

    private static void enterAmount(int amount) {
        EthanApiPlugin.getClient().setVarcStrValue(VarClientStr.INPUT_TEXT, String.valueOf(amount));
        EthanApiPlugin.getClient().runScript(681);
    }

    private static int getFreeSlot() {
        return Widgets.search().hiddenState(false).filter(x -> OFFER_SLOTS.contains(x.getId()) && x.getChild(3) != null && !x.getChild(3).isHidden()).first().map(Widget::getId).orElse(-1);
    }

    private static void widgetAction(int actionFieldNo, int widgetId, int itemId, int childId) {
        MousePackets.queueClickPacket();
        WidgetPackets.queueWidgetActionPacket(actionFieldNo, widgetId, itemId, childId);
    }

    private static int getNotedId(int id) {
        return EthanApiPlugin.getClient().getItemDefinition(id).getLinkedNoteId();
    }
}

package com.polyplugins.F2pProgressive.ge;

import com.example.EthanApiPlugin.Collections.query.ItemQuery;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetInfo;
import net.runelite.client.RuneLite;
import net.runelite.client.eventbus.Subscribe;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

public class GEInventory {
    static Client client = RuneLite.getInjector().getInstance(Client.class);
    public static List<Widget> inventoryItems = new ArrayList<>();
    static int lastUpdateTick = 0;

    public static ItemQuery search() {
        if (lastUpdateTick < client.getTickCount()) {
            client.runScript(6009, WidgetInfo.GRAND_EXCHANGE_INVENTORY_ITEMS_CONTAINER.getId(), 28, 1, -1);
            GEInventory.inventoryItems =
                    Arrays.stream(client.getWidget(WidgetInfo.GRAND_EXCHANGE_INVENTORY_ITEMS_CONTAINER).getDynamicChildren())
                            .filter(Objects::nonNull).filter(x -> x.getItemId() != 6512 && x.getItemId() != -1).collect(Collectors.toList());
            lastUpdateTick = client.getTickCount();
        }
        return new ItemQuery(inventoryItems);
    }

    public static int getEmptySlots() {
        return 28 - search().result().size();
    }

    public static boolean full() {
        return getEmptySlots() == 0;
    }

    public static int getItemAmount(int itemId) {
        return search().withId(itemId).result().size();
    }

    public static int getItemAmount(String itemName) {
        return search().withName(itemName).result().size();
    }

    @Subscribe
    public void onGameStateChanged(GameStateChanged gameStateChanged) {
        if (gameStateChanged.getGameState() == GameState.HOPPING || gameStateChanged.getGameState() == GameState.LOGIN_SCREEN || gameStateChanged.getGameState() == GameState.CONNECTION_LOST) {
            GEInventory.inventoryItems.clear();
        }
    }
}
